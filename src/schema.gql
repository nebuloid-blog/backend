enum Role {
	GUEST
	USER
	MODERATOR
	ADMINISTRATOR
}

type Query {
	############
	# ARTICLES #
	############

	getArticle(
		file: String!
		directory: String
		branch: String
	): Article

	indexArticles(
		directory: String
		branch: String
	): [Article!]

	#########
	# USERS #
	#########

	getMe: User

	###########
	# COURSES #
	###########

	getCourse(id: ID!): Course
	indexCourses: [Course!]

	############
	# PROJECTS #
	############

	getProject(id: ID!): Project
	indexProjects: [Project!]
}

type Mutation {
	#########
	# USERS #
	#########

	# Supplies a new refresh token upon success.
	createUser(
		email: String!
		username: String!
		password: String!
		role: Role
	): UserAuth!

	# Supplies a new refresh token upon success.
	signInUser(
		username: String!
		password: String!
	): UserAuth!

	# Should also delete all associated refresh tokens.
	deleteUser(
		userId: ID!
	): Boolean!

	# Revokes the given refresh token and supplies a new one.
	replaceRefreshToken(
		refreshToken: String!
	): SignedTokens!

	# Revokes the given refresh token.
	revokeRefreshToken(
		refreshToken: String!
	): Boolean!

	# Revokes all refresh tokens for a given user.
	revokeAllRefreshTokens(
		userId: ID!
	): Boolean!

	# Revokes all refresh tokens for all users.
	revokeAllRefreshTokensGlobal: Boolean!

	###########
	# COURSES #
	###########

	createCourse(
		name: String!
		description: String
		projects: [ID!]
	): ID!

	updateCourse(id: ID!): Boolean!
	deleteCourse(id: ID!): Boolean!

	############
	# PROJECTS #
	############

	createProject(
		name: String!
		description: String
		courses: [ID!]
	): ID!

	updateProject(id: ID!): Boolean!
	deleteProject(id: ID!): Boolean!
}

type Article @entity {
	# Parsed HTML contents of the file.
	html: String! @column
	# Metadata from the HTML file's front-matter.
	data: ArticleData! @column
}

type User @entity (
	additionalFields: [{
		path: "password",
		type: "string",
	}]
) {
	id: ID! @id
	email: String! @column
	username: String! @column
	role: Role! @column
}

type Course @entity {
	id: ID! @id
	name: String! @column
	description: String @column
	projects: [Project!] @link
}

type Project @entity {
	id: ID! @id
	name: String! @column
	description: String @column
	courses: [Course!] @link
}

# Metadata for Article entity.
type ArticleData {
	title: String!
	slug: String!
}

# Return type with auth data.
type UserAuth {
	user: User!
	tokens: SignedTokens!
}

# A pair of signed tokens.
type SignedTokens {
	accessToken: String!
	refreshToken: String!
}
